library(data.table)
library(ggplot2)
library(tidytext)
library(readr)
library(dplyr)
mt_samples <- read_csv("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/00_mtsamples/mtsamples.csv")
mt_samples <- mt_samples %>%
select(description, medical_specialty, transcription)
head(mt_samples)
mt_samples %>%
count('medical_specialty', sort = TRUE)
# the categories found through this method are overlapping
unique(mt_samples$medical_specialty)
length(unique(mt_samples$medical_specialty))
# 40 different
mt_samples
mt_samples %>%
unnest_tokens(words, transcription) %>%
count(words) %>%
top_n(20,n)
#mt_samples %>%
# count('words', sort = TRUE)
#visualize
mt_samples %>%
unnest_tokens(words, transcription) %>%
count(words) %>%
top_n(20,n) %>%
ggplot(aes(n,words)) +
geom_col()
mt_samples %>%
unnest_tokens(words, transcription) %>%
anti_join(stop_words, by=c("words" = "word")) %>%
count(words, sort=TRUE) %>%
top_n(20,n) %>%
ggplot(aes(n,words)) +
geom_col()
mt_samples %>%
unnest_ngrams(ngram2, transcription, n = 2) %>%
count(ngram2, sort=TRUE) %>%
top_n(20,n)
mt_samples %>%
unnest_ngrams(ngram3, transcription, n = 3) %>%
count(ngram3, sort=TRUE) %>%
top_n(20,n)
library(tidyr)
mt_samples %>%
unnest_ngrams(ngramb, transcription, n = 2) %>%
separate(ngramb, into=c("word1","word2"), sep = " ")  %>%
select(word1, word2)
top_word_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(1, n)
result <- mt_samples %>%
unnest_tokens(ngram, transcription, token = "ngrams", n = 2, delim = " ") %>%
filter(ngram %in% c("operating", "operating room")) %>%
separate(ngram, into = c("before", "after"), sep = " ", remove = FALSE)
result <- mt_samples %>%
unnest_tokens(ngram, transcription, token = "ngrams", n = 2) %>%
filter(ngram %in% c("operating", "operating room")) %>%
separate(ngram, into = c("before", "after"), sep = " ")
# Count the words that appear before and after 'operating'
word_counts <- result %>%
group_by(before, after) %>%
tally(sort = TRUE)
# Display the word counts
print(word_counts)
result <- mt_samples %>%
unnest_tokens(ngram, transcription, token = "ngrams", n = 2) %>%
filter(ngram %in% c("operating")) %>%
separate(ngram, into = c("before", "after"), sep = " ")
# Count the words that appear before and after 'operating'
word_counts <- result %>%
group_by(before, after) %>%
tally(sort = TRUE)
# Display the word counts
print(word_counts)
library(tidyr)
mt_samples %>%
unnest_ngrams(ngramb, transcription, n = 2) %>%
separate(ngramb, into=c("word1","word2"), sep = " ")  %>%
select(word1, word2)
####### better?
result <- mt_samples %>%
unnest_tokens(ngram, transcription, token = "ngrams", n = 2) %>%
filter(ngram %in% c("operating", "operating room")) %>%
separate(ngram, into = c("before", "after"), sep = " ")
# Count the words that appear before and after 'operating'
word_counts <- result %>%
group_by(before, after) %>%
tally(sort = TRUE)
# Display the word counts
print(word_counts)
library(data.table)
library(ggplot2)
library(tidytext)
library(readr)
library(dplyr)
mt_samples <- read_csv("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/00_mtsamples/mtsamples.csv")
mt_samples <- mt_samples %>%
select(description, medical_specialty, transcription)
head(mt_samples)
mt_samples %>%
count('medical_specialty', sort = TRUE)
# the categories found through this method are overlapping
unique(mt_samples$medical_specialty)
length(unique(mt_samples$medical_specialty))
# 40 different
mt_samples
mt_samples %>%
unnest_tokens(words, transcription) %>%
count(words) %>%
top_n(20,n)
#mt_samples %>%
# count('words', sort = TRUE)
#visualize
mt_samples %>%
unnest_tokens(words, transcription) %>%
count(words) %>%
top_n(20,n) %>%
ggplot(aes(n,words)) +
geom_col()
mt_samples %>%
unnest_tokens(words, transcription) %>%
anti_join(stop_words, by=c("words" = "word")) %>%
count(words, sort=TRUE) %>%
top_n(20,n) %>%
ggplot(aes(n,words)) +
geom_col()
mt_samples %>%
unnest_ngrams(ngram2, transcription, n = 2) %>%
count(ngram2, sort=TRUE) %>%
top_n(20,n)
mt_samples %>%
unnest_ngrams(ngram3, transcription, n = 3) %>%
count(ngram3, sort=TRUE) %>%
top_n(20,n)
library(dplyr)
library(tidyr)
result <- mt_samples %>%
unnest_tokens(ngram, transcription, token = "ngrams", n = 2) %>%
filter(ngram %in% c("operating", "operating room")) %>%
separate(ngram, into = c("before", "after"), sep = " ")
word_counts <- result %>%
group_by(before, after) %>%
tally(sort = TRUE)
print(word_counts)
top_word_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(1, n)
top_word_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(1, n)
top_word_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(1, n)
mt_samples <- mt_samples %>%
unnest_tokens(words, transcription)
top_word_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(1, n)
print(top_word_by_specialty)
top_words_by_specialty <- mt_samples %>%
group_by(medical_specialty, words) %>%
count(sort = TRUE) %>%
group_by(medical_specialty) %>%
top_n(5, n)
print(top_words_by_specialty)
